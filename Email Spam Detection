import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

# Step 1: Custom dataset
data = {
    'Has_Spam_Keywords': [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    'Email_Length': [100, 300, 120, 350, 80, 400, 95, 310, 70, 330],
    'Capital_Letters': [10, 2, 12, 3, 15, 1, 13, 2, 20, 3],
    'Links_Count': [3, 0, 4, 1, 5, 0, 4, 1, 6, 0],
    'Is_Spam': [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
}

df = pd.DataFrame(data)

# Step 2: Features & target
X = df.drop('Is_Spam', axis=1)
y = df['Is_Spam']

# Step 3: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

# Step 4: Train the model
model = LogisticRegression()
model.fit(X_train, y_train)

# Step 5: Predict on test set
y_pred = model.predict(X_test)

# Step 6: Evaluation
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 7: Predict new email
new_email = pd.DataFrame({
    'Has_Spam_Keywords': [1],
    'Email_Length': [90],
    'Capital_Letters': [12],
    'Links_Count': [4]
})

prob = model.predict_proba(new_email)[0][1]
pred = model.predict(new_email)[0]

print(f"\nProbability of being spam: {prob:.2f}")
print(f"Prediction: {'Spam' if pred == 1 else 'Not Spam'}")
