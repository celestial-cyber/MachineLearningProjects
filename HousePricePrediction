import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Create the dataset manually
data = {
    'Size_sqft': [1400, 1600, 1200, 1800, 2200, 1000, 1450, 1700],
    'Bedrooms': [3, 4, 2, 4, 5, 2, 3, 3],
    'Location': ['Suburb', 'City', 'Rural', 'Suburb', 'City', 'Rural', 'City', 'Suburb'],
    'Age': [10, 5, 15, 8, 3, 20, 6, 4],
    'Price': [350000, 500000, 200000, 400000, 650000, 150000, 480000, 420000]
}

df = pd.DataFrame(data)

# Step 2: Define features and target
X = df.drop('Price', axis=1)
y = df['Price']

# Step 3: Preprocessing for categorical data
categorical_features = ['Location']
numeric_features = ['Size_sqft', 'Bedrooms', 'Age']

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(drop='first'), categorical_features)
    ],
    remainder='passthrough'  # Keep numeric features as they are
)

# Step 4: Create pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# Step 5: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Train the model
model.fit(X_train, y_train)

# Step 7: Predict
y_pred = model.predict(X_test)

# Step 8: Evaluation
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))

# Step 9: Make prediction on a new house
new_house = pd.DataFrame({
    'Size_sqft': [1600],
    'Bedrooms': [3],
    'Location': ['City'],
    'Age': [5]
})

predicted_price = model.predict(new_house)
print("Predicted price for new house:", predicted_price[0])
