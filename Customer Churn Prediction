import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report

# -----------------------------
# 1. Custom Dataset (in-code)
# -----------------------------
data = {
    'Monthly_Usage_Hours': [10, 5, 25, 8, 20, 30, 2, 18, 12, 4],
    'Support_Tickets':     [1, 3, 0, 2, 1, 0, 4, 1, 1, 3],
    'Late_Payments':       [0, 2, 0, 1, 0, 0, 3, 1, 0, 2],
    'Subscription_Years':  [2, 1, 3, 2, 4, 5, 1, 3, 3, 1],
    'Churn':               [0, 1, 0, 0, 0, 0, 1, 0, 0, 1]
}

df = pd.DataFrame(data)

# -----------------------------
# 2. Features & Target
# -----------------------------
X = df[['Monthly_Usage_Hours', 'Support_Tickets', 'Late_Payments', 'Subscription_Years']]
y = df['Churn']

# -----------------------------
# 3. Train-Test Split
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# -----------------------------
# 4. Train Model
# -----------------------------
model = LogisticRegression()
model.fit(X_train, y_train)

# -----------------------------
# 5. Evaluation
# -----------------------------
y_pred = model.predict(X_test)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# -----------------------------
# 6. Predict New Customer Churn
# -----------------------------
new_customer = pd.DataFrame({
    'Monthly_Usage_Hours': [6],
    'Support_Tickets': [2],
    'Late_Payments': [1],
    'Subscription_Years': [1]
})

churn_prob = model.predict_proba(new_customer)[0][1]
churn_decision = model.predict(new_customer)[0]

print(f"\nChurn Probability: {churn_prob:.2f}")
print(f"Will Customer Churn? {'Yes ❌' if churn_decision == 1 else 'No ✅'}")
