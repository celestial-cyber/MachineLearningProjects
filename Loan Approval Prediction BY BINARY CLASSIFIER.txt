import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report

# -----------------------------
# 1. Custom Dataset (in-code)
# -----------------------------
data = {
    'Income': [30, 60, 25, 80, 40, 90, 35, 50, 75, 20],
    'Employment_Status': [1, 1, 0, 1, 1, 1, 0, 1, 1, 0],
    'Credit_Score': [700, 750, 620, 800, 680, 820, 610, 690, 770, 580],
    'Loan_Amount': [15, 25, 10, 20, 18, 30, 12, 20, 28, 10],
    'Loan_Approved': [1, 1, 0, 1, 1, 1, 0, 1, 1, 0]
}

df = pd.DataFrame(data)

# -----------------------------
# 2. Split Features & Labels
# -----------------------------
X = df[['Income', 'Employment_Status', 'Credit_Score', 'Loan_Amount']]
y = df['Loan_Approved']

# -----------------------------
# 3. Train-Test Split
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# -----------------------------
# 4. Train Logistic Regression
# -----------------------------
model = LogisticRegression()
model.fit(X_train, y_train)

# -----------------------------
# 5. Evaluate Model
# -----------------------------
y_pred = model.predict(X_test)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# -----------------------------
# 6. Predict New Application
# -----------------------------
new_data = pd.DataFrame({
    'Income': [55],
    'Employment_Status': [1],
    'Credit_Score': [710],
    'Loan_Amount': [18]
})

prob = model.predict_proba(new_data)[0][1]
decision = model.predict(new_data)[0]

print(f"\nLoan Approval Probability: {prob:.2f}")
print(f"Final Decision: {'Approved ✅' if decision == 1 else 'Rejected ❌'}")
