import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report

# -------------------------------
# 1. Custom Dataset (In-code)
# -------------------------------
data = {
    'Page_Views':         [5, 1, 10, 3, 8, 15, 2, 9, 4, 6],
    'Time_Spent_Min':     [2, 1, 15, 3, 10, 20, 1, 12, 2, 5],
    'Previous_Purchases': [1, 0, 3, 0, 2, 5, 0, 3, 0, 1],
    'Device_Type':        ['Mobile', 'Mobile', 'Desktop', 'Mobile', 'Desktop', 'Desktop', 'Mobile', 'Desktop', 'Mobile', 'Mobile'],
    'Purchased':          [0, 0, 1, 0, 1, 1, 0, 1, 0, 1]
}

df = pd.DataFrame(data)

# --------------------------------------
# 2. Preprocessing (Encode Device Type)
# --------------------------------------
le = LabelEncoder()
df['Device_Type'] = le.fit_transform(df['Device_Type'])  # Desktop=0, Mobile=1

# -------------------------------
# 3. Features & Target
# -------------------------------
X = df[['Page_Views', 'Time_Spent_Min', 'Previous_Purchases', 'Device_Type']]
y = df['Purchased']

# -------------------------------
# 4. Train-Test Split
# -------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# -------------------------------
# 5. Train Model
# -------------------------------
model = LogisticRegression()
model.fit(X_train, y_train)

# -------------------------------
# 6. Evaluate Model
# -------------------------------
y_pred = model.predict(X_test)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# -------------------------------
# 7. Predict for New Visitor
# -------------------------------
new_visitor = pd.DataFrame({
    'Page_Views': [7],
    'Time_Spent_Min': [6],
    'Previous_Purchases': [1],
    'Device_Type': [le.transform(['Mobile'])[0]]  # Encode 'Mobile'
})

purchase_prob = model.predict_proba(new_visitor)[0][1]
purchase_decision = model.predict(new_visitor)[0]

print(f"\nPurchase Probability: {purchase_prob:.2f}")
print(f"Will Purchase? {'Yes ✅' if purchase_decision == 1 else 'No ❌'}")
