import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report

# -------------------------------
# 1. Sample Dataset
# -------------------------------
data = {
    'Amount': [500, 50, 10000, 200, 5, 15000, 90, 7000, 60, 800],
    'Location': ['Domestic', 'Domestic', 'International', 'Domestic', 'Domestic', 'International', 'Domestic', 'International', 'Domestic', 'International'],
    'Hour': [14, 9, 2, 16, 12, 1, 10, 3, 11, 23],
    'Past_Frauds': [0, 0, 2, 0, 0, 3, 0, 2, 0, 1],
    'Is_Fraud': [0, 0, 1, 0, 0, 1, 0, 1, 0, 1]
}

df = pd.DataFrame(data)

# -------------------------------
# 2. Encode Categorical Feature
# -------------------------------
le = LabelEncoder()
df['Location'] = le.fit_transform(df['Location'])  # Domestic = 0, International = 1

# -------------------------------
# 3. Features and Target
# -------------------------------
X = df[['Amount', 'Location', 'Hour', 'Past_Frauds']]
y = df['Is_Fraud']

# -------------------------------
# 4. Train-Test Split
# -------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# -------------------------------
# 5. Train Logistic Regression
# -------------------------------
model = LogisticRegression()
model.fit(X_train, y_train)

# -------------------------------
# 6. Evaluation
# -------------------------------
y_pred = model.predict(X_test)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# -------------------------------
# 7. Predict New Transaction
# -------------------------------
new_transaction = pd.DataFrame({
    'Amount': [12000],
    'Location': [le.transform(['International'])[0]],
    'Hour': [4],
    'Past_Frauds': [1]
})

fraud_prob = model.predict_proba(new_transaction)[0][1]
fraud_pred = model.predict(new_transaction)[0]

print(f"\nFraud Probability: {fraud_prob:.2f}")
print(f"Is Fraudulent? {'Yes ❌' if fraud_pred == 1 else 'No ✅'}")
